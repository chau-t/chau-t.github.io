import numpy as np
import pandas as pd
from scipy.optimize import minimize
blp=pd.read_csv('data.blp.csv')
blp=blp.sort_values('model_year')
###Generating trend term
blp['trend']=blp['model_year']-float('71')
blp['one']=float(1)
'''
-------------------------
ns: number of draws=150
v_ns: multivariate normal distribution with mean 1 and covariance equal to identity matrix
incomed: variable for income which follows a normal distribution with mean 3.082 and 
         variance equal to 0.84
v_i0: a vector of length (ns,) which is used to add extra variation to utility of outside good
v_iy: a vector of length (ns,) which is used to add variation to income distribution 
v_ik: a set of 5 vectors, each of length (ns,),which is interacted with demand side characteristics in order
      to resolve problems in substitution patterns that would arise in its absence
share: observed shares of goods in each market. 
share_out: share of the outside good in each market
delta_g: difference between natural logarithm of observed shares and natural logarithm oof share
         of the outside good
pinc: the ratio of price to incomed that enters the final share function specification
market: each year in a 20 year old time period(1971-1990) is considered to be a market

Note: Most of the short lines beside any code written is just me keeping track of the dimensions of 
      the matrices or variable type
-------------------------
'''

###Obtaining ns draws. 
import random 
random.seed(9001)
mean=np.zeros(150,)
covariance=np.eye(mean.shape[0])
draws=np.random.multivariate_normal(mean,covariance,size=(7,))
v_ns=draws.T  ## (150,)
v_iy=v_ns[:,0]
incomed=np.array([np.array('3.082',dtype=float)]*150)+0.84*v_iy ##(150,)

price=np.array(blp['price']) ###(2217,)
price1=price.reshape(price.shape[0],1)
v_ik=(v_ns[:,2:7])  ##150 5
v_ikt=v_ik.T 
v_i0=v_ns[:,1]
share=np.array(blp['share'])  ###(2217,)
share_out=np.array(blp['share_out'])  ###(2217,)
delta_g=np.log(share)-np.log(share_out)  ##(2217,)
delta_g=delta_g.reshape(delta_g.shape[0],1) ###2217 1
pinc=price1/incomed
 

###Ordering demand and supply-side variables by market and then by firm in each market.
###There are 26 unique firms in this twenty year period. 
shifters=np.array(blp.loc[:,['one','hpwt','air','mpd','mpg','space','trend','market','firmid']])
def shift(c,d):
    shift_m=shifters[np.where(shifters[:,7]==c)]
    shift_f=shift_m[np.where(shift_m[:,-1]==d)]
    x_jk=shift_f[:,(0,1,2,3,5)]
    w_jk=shift_f[:,(0,1,2,4,5,6)]
    return x_jk,w_jk

demand_list=[]
supply_list=[]
for i in range(1,21):
    for j in range(1,27):
        shifts=shift(i,j)
        demand_list.append(shifts[0])
        supply_list.append(shifts[1])
demand=np.vstack(demand_list)
supply=np.vstack(supply_list)
supply_log=np.log(supply[:,(1,3,4)])
supply=np.delete(supply,[1,3,4],axis=1)
supply_t=np.c_[supply_log,supply]
#lnhpwt,lnmpg,lnspace,one,air,trend
permutation=[1,3,4,0,2,5]
s=np.argsort(permutation)
supply_true=supply_t[:,s]
'''
----------------------------------------------
Constructing demand and supply side instruments
zd: demand side instruments
zs: supply side instruments 
own_product:Instruments using characteristics of own product 
z_rk_o: Instruments using characteristics of own firm's other goods in a market 
z_rk_r: Instruments using characteristics of rival firms in a market
----------------------------------------------
'''
df1=np.array(blp.loc[:,['one','hpwt','air','mpd','mpg','space','trend','model_year','newmodv','id','firmid']]) ###2217 11
v=np.array(range(1,2218))
v=v.reshape(v.shape[0],1)
df2=np.c_[df1,v]  ###shape=2217 12
###need to sort df1 by market and by firm too
def ins(x,y):
    v=df2[np.where(df2[:,6]==x)]                     
    v1=v[np.where(v[:,10]==y)]                       
    v2=np.delete(v1,[7,8,9,10,11],1) 
    v3=v1[:,(7,8,9,10,11)]
    add_o= np.sum(v2,axis=0) ##shape:(7,)
    z_rk_o=add_o-v2 
    own_product=v2
    c=df2[np.where(df2[:,6]==x)]
    c1=c[np.where(c[:,10]!=y)]
    c2=np.delete(c1,[7,8,9,10,11],1)  
    riv=np.sum(c2,axis=0)  ##(7,)
    riv1=riv.reshape(1,riv.shape[0])
    z_rk_r=np.repeat(riv1,z_rk_o.shape[0],axis=0)
    res=np.concatenate((own_product,z_rk_o,z_rk_r,v3),axis=1)
    return res

l=[]
for u in range(0,20):
    for w in range(1,27):
        s=ins(u,w)
        l.append(s)
output=np.vstack(l) 

####Constructing demand instruments
zd=output[:,(0,1,2,3,5,7,8,9,10,12,14,15,16,17,19)] ##(2217 15)
zd=zd.astype(float)
###Construct supply instruments 
zs=output[:,(0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20)] ##(2217 19)
zs=zs.astype(float)
'''
--------------------------------------------------------
Obtaining market shares, delta and price derivatives in each market
theta: vector of parameters of the model. In this case, theta corresponds to 
parameters alpha and sigma from the paper. Since the other two parameters,
beta and gamma can be concentrated out, optimization would involved a search over 
alpha, sigma pairs.

Since price derivatives will be sorted by firm id in each market
all other variables are also reordered by firm id in each market. 

Variables:
delta_g: ln(observed shares)-ln(share of outside good) in each market; 
         this is the initiall guess for delta 
share:observed shares in each market 
--------------------------------------------------------
'''

df4=np.array(blp.loc[:,['price','market','one','hpwt','air','mpd','space','share','share_out','modelvec']])  
counter=np.array(range(1,2218)) 
counter=counter.reshape(counter.shape[0],1)  
fid=np.array(blp['firmid'])
fid=fid.reshape(fid.shape[0],1)  
df5=np.concatenate((df4,delta_g,counter,fid),axis=1) 
df5=df5[df5[:,-1].argsort()]            
v_split=np.hsplit(v_ik,v_ik.shape[1])

          def p(theta):    
              def each_market(m):
############################COMPUTING SHARES IN EACH MARKET##################################################
                  df6=df5[np.where(df5[:,1]==m)] ##Isolated for market
                  df7=df6[df6[:,-1].argsort()] ###sorted by firm in each market 
                  vth=np.concatenate(((theta[1]*v_split[0]),(theta[2]*v_split[1]),(theta[3]*v_split[2]),(theta[4]*v_split[3]),(theta[5]*v_split[4])),axis=1)
                  xv=np.dot(vth,(df7[:,2:7]).T) 
                  xv=xv.T 
                  p=df7[:,0]
                  p=p.reshape(p.shape[0],1)
                  pinc=p/incomed
                  delta_g=np.log((df7[:,7]).astype(float))-np.log((df7[:,8]).astype(float))
                  delta_g=delta_g.reshape(delta_g.shape[0],1)
                  num=np.exp(((-theta[0])*pinc-v_i0+xv+delta_g).astype(float))
                  denum=1+np.sum(num,axis=0)
                  div=num/denum   ###(mkt size,150)
                  add_indiv=np.sum(div,axis=1)
                  s=add_indiv/150
                  s=s.reshape(s.shape[0],1)
                  firm_order=(df7[:,12].reshape((df7[:,12].shape[0]),1))
                  count_order=np.arange(len(s)).reshape((len(s)),1) ###new count order that accounts  
    ######################OBTAINING DELTA IN EACH MARKET#################################################    
                  delta_cu=delta_g  
                  share=(df7[:,7]).reshape(((df7[:,7]).shape[0]),1)
                  share=share.astype(float)
                  delta_d=1
                  delta_s=1 
                  i=0 
                  while delta_d>1e-12 or delta_s>1e-10:
                        delta_init=delta_cu
                        num1=np.exp(((-theta[0])*pinc-v_i0+xv+delta_init).astype(float))
                        denum1=1+np.sum(num1,axis=0)
                        ratio=num1/denum1
                        add_indiv1=np.sum(ratio,axis=1)
                        s1=add_indiv1/150
                        s1=s1.reshape(s1.shape[0],1)
                        s1=s1.astype(float)
                        delta_cu=delta_init+np.log(share)-np.log(s1)
                        delta_cu=delta_cu.reshape(delta_cu.shape[0],1)
                        delta_d=np.linalg.norm((delta_cu-delta_init),np.inf)
                        delta_s=np.linalg.norm((s1-share),np.inf)
                        i+=1
                        if delta_d<1e-12 or delta_s<1e-10:
                           break
 #################OBTAINING PRICE DERIVATIVES IN EACH MARKET############################################        
                  divf=np.concatenate((div,firm_order,count_order,p),axis=1)     
                  C=(-theta[0])/incomed    ###(150,)
        
################OBTAINING PRICE DERIVATIVES FROM EACH FIRM############################################        
                  def firm(f):
                      df8=divf[np.where(divf[:,-3]==f)]
            ###Cross-price derivatives######################
                      div_isol=df8[:,0:-3] 
                      fd=df8[:,-3].reshape((df8[:,-3]).shape[0],1)
                      count1=df8[:,-2].reshape((df8[:,-2]).shape[0],1)
                      divt=div_isol.T  
                      split=np.vsplit(divt,divt.shape[0])
                      C1=C.reshape(C.shape[0],1)
                      g=[]
                      for i in range(len(split)):
                          for j in range(len(split)):
                              if i==j:
                                 s=np.kron(split[i],split[j])  
                                 g.append(s)
                      prodmc=np.vstack(g)  
                      prodmc1=C1*prodmc
                      prod_indiv_good=np.hsplit(prodmc1,np.sqrt(prodmc1.shape[1]))
                      g2=[]
                      for i in range(0,len(prod_indiv_good)):
                          prodm_s=np.sum(prod_indiv_good[i],axis=0)
                          prod_sd=(1/150)*prodm_s
                          g2.append(prod_sd)
                      crossprod=np.vstack(g2)    ###shape:len(crossprod len(crossprod)
            ###own derivatives 
                      deriv=(-C)*(div_isol)*(1-(div_isol)) 
                      own_deriv=(np.sum(deriv,axis=1))*(1/150) 
                      diag=list(own_deriv)   
                      indices=np.diag_indices(len(crossprod))           
                      crossprod[indices]=diag  
                      crossprod2=np.c_[crossprod,fd]
                      crossprod3=np.c_[crossprod2,count1]
                      matrix=np.zeros((len(df7),len(df7)))  ##mkt size mkt size 
                      j=crossprod3[:,-1]
                      h=j
                      h=list(h)
                      h1=list(map(int,h))
                      final=crossprod3[:,0:-2]
                      for u in range(0,len(h1)):
                          for k in range(0,len(h1)):
                              matrix[h1[u],h1[k]]=final[u,k]  
                      return matrix  
##############OBTAINING PRICE DERIVATIVES AND MARGINAL COSTS FOR ALL FIRMS IN EACH MARKET##########################                                   
                  firm_market_list=[]
                  for fi in range(1,27):
                      try:
                         d=firm(fi)
                         firm_market_list.append(d)
                      except ValueError: ###all firms are not in all markets
                             pass           
                  res=np.vstack(firm_market_list)
                  res1=np.unique(res,axis=0) 
                  for i in range(res1.shape[0]):
                      if np.all(res1[i])==0:
                         result=np.delete(res1,i,axis=0)
        
                  inverse=np.linalg.pinv(result)
                  b=np.dot(inverse.T,s)  ##pinv or just inv?
        
                  return b,delta_cu,p   ##need price ordered
##############OBTAINING MARGINAL COST AND DELTA FOR ALL MARKETS#####################################    
              j1=[]
              j2=[]
              j3=[]
   
              for item in range(1,21):
                  c=each_market(item)[0]
                  j1.append(c)
                  delta=each_market(item)[1]
                  j2.append(delta)
                  pr=each_market(item)[2]
                  j3.append(pr)
        
              out=np.vstack(j1)    ###object
              delta_out=np.vstack(j2)  ###float64
              price_m=np.vstack(j3)    ###object
              price_m=price_m.astype(float)
              instrument=np.vstack((np.c_[zd,zs*0],np.c_[zd*0,zs])) 
              ratio=np.divide(out,price_m)
              supply_unobserve=np.log(price_m)-ratio    ###8 1
              exog=np.vstack((np.c_[demand,supply_true*0],np.c_[demand*0,supply_true])) ### 10 11
              y=np.vstack((delta_out,supply_unobserve)) ##10 1 
              W=np.identity(instrument.shape[1])
              XX=np.dot((np.dot((np.dot(exog.T,instrument)),W)),(np.dot(instrument.T,exog)))  ###11 11
              XY=np.dot((np.dot((np.dot(exog.T,instrument)),W)),(np.dot(instrument.T,y))) ###11 1
              B=np.dot((np.linalg.pinv(XX)),XY) ###11 1
              error=y-np.dot(exog,B)
              ez=np.dot(error.T,instrument)
              ez1=ez/(len(ez)*0.5)
              ez2=np.dot((np.dot(ez1,W)),ez1.T)
              ez3=float(ez2)
              return ez3 

###The results with other optimization algorithms were too close 
###to the initial guess, did not converge or were extremely slow.
###I tried with several packages and tried Nelder-Mead and BOBYQA algorithms.
###However COBYLA converges fastest and also gives slightly better results.
###I plan to profile, speed up code as much as possible and re-try with other algorithms. 
bounds=[ [10,45],[0,15],[0,15],[0,15],[0,15],[0,15]  ]              
cons = []
for factor in range(len(bounds)):
    lower, upper = bounds[factor]
    l = {'type': 'ineq',
         'fun': lambda x, lb=lower, i=factor: x[i] - lb}
    u = {'type': 'ineq',
         'fun': lambda x, ub=upper, i=factor: ub - x[i]}
    cons.append(l)
    cons.append(u)
    
theta=np.array([43.501,3.612,4.628,1.818,1.050,2.056])
res = scipy.optimize.minimize(p,theta,constraints=cons,method='COBYLA')
print(res)
